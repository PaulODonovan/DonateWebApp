/*global Buffer require exports console setTimeout */

var events = require("events"),
    util = require("../util"),
    hiredis = require("hiredis");

exports.debug_mode = false;
exports.name = "hiredis";

function HiredisReplyParser(options) {
    this.name = exports.name;
    this.options = options || {};
    this.reset();
    events.EventEmitter.call(this);
}

util.inherits(HiredisReplyParser, events.EventEmitter);

exports.Parser = HiredisReplyParser;

HiredisReplyParser.prototype.reset = function () {
    this.reader = new hiredis.Reader({
<<<<<<< HEAD
	return_buffers: this.options.return_buffers || false
=======
        return_buffers: this.options.return_buffers || false
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
    });
};

HiredisReplyParser.prototype.execute = function (data) {
    var reply;
    this.reader.feed(data);
    while (true) {
<<<<<<< HEAD
	try {
	  reply = this.reader.get();
	} catch (err) {
	  this.emit("error", err);
	  break;
	}

	if (reply === undefined) break;

	if (reply && reply.constructor === Error) {
	    this.emit("reply error", reply);
	} else {
	    this.emit("reply", reply);
	}
=======
        try {
          reply = this.reader.get();
        } catch (err) {
          this.emit("error", err);
          break;
        }

        if (reply === undefined) break;

        if (reply && reply.constructor === Error) {
            this.emit("reply error", reply);
        } else {
            this.emit("reply", reply);
        }
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
    }
};
