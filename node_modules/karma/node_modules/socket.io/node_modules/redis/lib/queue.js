var to_array = require("./to_array");

// Queue class adapted from Tim Caswell's pattern library
// http://github.com/creationix/pattern/blob/master/lib/pattern/queue.js

function Queue() {
    this.tail = [];
    this.head = [];
    this.offset = 0;
}

Queue.prototype.shift = function () {
    if (this.offset === this.head.length) {
<<<<<<< HEAD
	var tmp = this.head;
	tmp.length = 0;
	this.head = this.tail;
	this.tail = tmp;
	this.offset = 0;
	if (this.head.length === 0) {
	    return;
	}
=======
        var tmp = this.head;
        tmp.length = 0;
        this.head = this.tail;
        this.tail = tmp;
        this.offset = 0;
        if (this.head.length === 0) {
            return;
        }
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
    }
    return this.head[this.offset++]; // sorry, JSLint
};

Queue.prototype.push = function (item) {
    return this.tail.push(item);
};

Queue.prototype.forEach = function (fn, thisv) {
    var array = this.head.slice(this.offset), i, il;

    array.push.apply(array, this.tail);

    if (thisv) {
<<<<<<< HEAD
	for (i = 0, il = array.length; i < il; i += 1) {
	    fn.call(thisv, array[i], i, array);
	}
    } else {
	for (i = 0, il = array.length; i < il; i += 1) {
	    fn(array[i], i, array);
	}
=======
        for (i = 0, il = array.length; i < il; i += 1) {
            fn.call(thisv, array[i], i, array);
        }
    } else {
        for (i = 0, il = array.length; i < il; i += 1) {
            fn(array[i], i, array);
        }
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
    }

    return array;
};

Queue.prototype.getLength = function () {
    return this.head.length - this.offset + this.tail.length;
};
<<<<<<< HEAD

Object.defineProperty(Queue.prototype, 'length', {
    get: function () {
	return this.getLength();
=======
    
Object.defineProperty(Queue.prototype, 'length', {
    get: function () {
        return this.getLength();
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
    }
});


if(typeof module !== 'undefined' && module.exports) {
  module.exports = Queue;
}
