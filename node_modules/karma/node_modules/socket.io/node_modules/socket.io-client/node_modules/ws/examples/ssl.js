
(function(){

    "use strict";

    var fs = require('fs');

    // you'll probably load configuration from config
    var cfg = {
<<<<<<< HEAD
	ssl: true,
	port: 8080,
	ssl_key: '/path/to/you/ssl.key',
	ssl_cert: '/path/to/you/ssl.crt'
=======
        ssl: true,
        port: 8080,
        ssl_key: '/path/to/you/ssl.key',
        ssl_cert: '/path/to/you/ssl.crt'
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
    };

    var httpServ = ( cfg.ssl ) ? require('https') : require('http');

    var WebSocketServer   = require('../').Server;

    var app      = null;

    // dummy request processing
    var processRequest = function( req, res ) {

<<<<<<< HEAD
	res.writeHead(200);
	res.end("All glory to WebSockets!\n");
=======
        res.writeHead(200);
        res.end("All glory to WebSockets!\n");
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
    };

    if ( cfg.ssl ) {

<<<<<<< HEAD
	app = httpServ.createServer({

	    // providing server with  SSL key/cert
	    key: fs.readFileSync( cfg.ssl_key ),
	    cert: fs.readFileSync( cfg.ssl_cert )

	}, processRequest ).listen( cfg.port );

    } else {

	app = httpServ.createServer( processRequest ).listen( cfg.port );
=======
        app = httpServ.createServer({

            // providing server with  SSL key/cert
            key: fs.readFileSync( cfg.ssl_key ),
            cert: fs.readFileSync( cfg.ssl_cert )

        }, processRequest ).listen( cfg.port );

    } else {

        app = httpServ.createServer( processRequest ).listen( cfg.port );
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
    }

    // passing or reference to web server so WS would knew port and SSL capabilities
    var wss = new WebSocketServer( { server: app } );


    wss.on( 'connection', function ( wsConnect ) {

<<<<<<< HEAD
	wsConnect.on( 'message', function ( message ) {

	    console.log( message );

	});
=======
        wsConnect.on( 'message', function ( message ) {

            console.log( message );

        });
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e

    });


}());