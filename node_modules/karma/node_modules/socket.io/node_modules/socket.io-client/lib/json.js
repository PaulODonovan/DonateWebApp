
/**
 * socket.io
 * Copyright(c) 2011 LearnBoost <dev@learnboost.com>
 * MIT Licensed
 */

/**
 * Based on JSON2 (http://www.JSON.org/js.html).
 */

(function (exports, nativeJSON) {
  "use strict";

  // use native JSON if it's available
  if (nativeJSON && nativeJSON.parse){
    return exports.JSON = {
      parse: nativeJSON.parse
    , stringify: nativeJSON.stringify
    };
  }

  var JSON = exports.JSON = {};

  function f(n) {
      // Format integers to have at least two digits.
      return n < 10 ? '0' + n : n;
  }

  function date(d, key) {
    return isFinite(d.valueOf()) ?
<<<<<<< HEAD
	d.getUTCFullYear()     + '-' +
	f(d.getUTCMonth() + 1) + '-' +
	f(d.getUTCDate())      + 'T' +
	f(d.getUTCHours())     + ':' +
	f(d.getUTCMinutes())   + ':' +
	f(d.getUTCSeconds())   + 'Z' : null;
=======
        d.getUTCFullYear()     + '-' +
        f(d.getUTCMonth() + 1) + '-' +
        f(d.getUTCDate())      + 'T' +
        f(d.getUTCHours())     + ':' +
        f(d.getUTCMinutes())   + ':' +
        f(d.getUTCSeconds())   + 'Z' : null;
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
  };

  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
      escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
      gap,
      indent,
      meta = {    // table of character substitutions
<<<<<<< HEAD
	  '\b': '\\b',
	  '\t': '\\t',
	  '\n': '\\n',
	  '\f': '\\f',
	  '\r': '\\r',
	  '"' : '\\"',
	  '\\': '\\\\'
=======
          '\b': '\\b',
          '\t': '\\t',
          '\n': '\\n',
          '\f': '\\f',
          '\r': '\\r',
          '"' : '\\"',
          '\\': '\\\\'
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
      },
      rep;


  function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

      escapable.lastIndex = 0;
      return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
<<<<<<< HEAD
	  var c = meta[a];
	  return typeof c === 'string' ? c :
	      '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
=======
          var c = meta[a];
          return typeof c === 'string' ? c :
              '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
      }) + '"' : '"' + string + '"';
  }


  function str(key, holder) {

// Produce a string from holder[key].

      var i,          // The loop counter.
<<<<<<< HEAD
	  k,          // The member key.
	  v,          // The member value.
	  length,
	  mind = gap,
	  partial,
	  value = holder[key];
=======
          k,          // The member key.
          v,          // The member value.
          length,
          mind = gap,
          partial,
          value = holder[key];
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e

// If the value has a toJSON method, call it to obtain a replacement value.

      if (value instanceof Date) {
<<<<<<< HEAD
	  value = date(key);
=======
          value = date(key);
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
      }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

      if (typeof rep === 'function') {
<<<<<<< HEAD
	  value = rep.call(holder, key, value);
=======
          value = rep.call(holder, key, value);
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
      }

// What happens next depends on the value's type.

      switch (typeof value) {
      case 'string':
<<<<<<< HEAD
	  return quote(value);
=======
          return quote(value);
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e

      case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

<<<<<<< HEAD
	  return isFinite(value) ? String(value) : 'null';
=======
          return isFinite(value) ? String(value) : 'null';
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e

      case 'boolean':
      case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

<<<<<<< HEAD
	  return String(value);
=======
          return String(value);
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e

// If the type is 'object', we might be dealing with an object or an array or
// null.

      case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

<<<<<<< HEAD
	  if (!value) {
	      return 'null';
	  }

// Make an array to hold the partial results of stringifying this object value.

	  gap += indent;
	  partial = [];

// Is the value an array?

	  if (Object.prototype.toString.apply(value) === '[object Array]') {
=======
          if (!value) {
              return 'null';
          }

// Make an array to hold the partial results of stringifying this object value.

          gap += indent;
          partial = [];

// Is the value an array?

          if (Object.prototype.toString.apply(value) === '[object Array]') {
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

<<<<<<< HEAD
	      length = value.length;
	      for (i = 0; i < length; i += 1) {
		  partial[i] = str(i, value) || 'null';
	      }
=======
              length = value.length;
              for (i = 0; i < length; i += 1) {
                  partial[i] = str(i, value) || 'null';
              }
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

<<<<<<< HEAD
	      v = partial.length === 0 ? '[]' : gap ?
		  '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
		  '[' + partial.join(',') + ']';
	      gap = mind;
	      return v;
	  }

// If the replacer is an array, use it to select the members to be stringified.

	  if (rep && typeof rep === 'object') {
	      length = rep.length;
	      for (i = 0; i < length; i += 1) {
		  if (typeof rep[i] === 'string') {
		      k = rep[i];
		      v = str(k, value);
		      if (v) {
			  partial.push(quote(k) + (gap ? ': ' : ':') + v);
		      }
		  }
	      }
	  } else {

// Otherwise, iterate through all of the keys in the object.

	      for (k in value) {
		  if (Object.prototype.hasOwnProperty.call(value, k)) {
		      v = str(k, value);
		      if (v) {
			  partial.push(quote(k) + (gap ? ': ' : ':') + v);
		      }
		  }
	      }
	  }
=======
              v = partial.length === 0 ? '[]' : gap ?
                  '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                  '[' + partial.join(',') + ']';
              gap = mind;
              return v;
          }

// If the replacer is an array, use it to select the members to be stringified.

          if (rep && typeof rep === 'object') {
              length = rep.length;
              for (i = 0; i < length; i += 1) {
                  if (typeof rep[i] === 'string') {
                      k = rep[i];
                      v = str(k, value);
                      if (v) {
                          partial.push(quote(k) + (gap ? ': ' : ':') + v);
                      }
                  }
              }
          } else {

// Otherwise, iterate through all of the keys in the object.

              for (k in value) {
                  if (Object.prototype.hasOwnProperty.call(value, k)) {
                      v = str(k, value);
                      if (v) {
                          partial.push(quote(k) + (gap ? ': ' : ':') + v);
                      }
                  }
              }
          }
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

<<<<<<< HEAD
	  v = partial.length === 0 ? '{}' : gap ?
	      '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
	      '{' + partial.join(',') + '}';
	  gap = mind;
	  return v;
=======
          v = partial.length === 0 ? '{}' : gap ?
              '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
              '{' + partial.join(',') + '}';
          gap = mind;
          return v;
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
      }
  }

// If the JSON object does not yet have a stringify method, give it one.

  JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

      var i;
      gap = '';
      indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

      if (typeof space === 'number') {
<<<<<<< HEAD
	  for (i = 0; i < space; i += 1) {
	      indent += ' ';
	  }
=======
          for (i = 0; i < space; i += 1) {
              indent += ' ';
          }
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e

// If the space parameter is a string, it will be used as the indent string.

      } else if (typeof space === 'string') {
<<<<<<< HEAD
	  indent = space;
=======
          indent = space;
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
      }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

      rep = replacer;
      if (replacer && typeof replacer !== 'function' &&
<<<<<<< HEAD
	      (typeof replacer !== 'object' ||
	      typeof replacer.length !== 'number')) {
	  throw new Error('JSON.stringify');
=======
              (typeof replacer !== 'object' ||
              typeof replacer.length !== 'number')) {
          throw new Error('JSON.stringify');
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
      }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

      return str('', {'': value});
  };

// If the JSON object does not yet have a parse method, give it one.

  JSON.parse = function (text, reviver) {
  // The parse method takes a text and an optional reviver function, and returns
  // a JavaScript value if the text is a valid JSON text.

      var j;

      function walk(holder, key) {

  // The walk method is used to recursively walk the resulting structure so
  // that modifications can be made.

<<<<<<< HEAD
	  var k, v, value = holder[key];
	  if (value && typeof value === 'object') {
	      for (k in value) {
		  if (Object.prototype.hasOwnProperty.call(value, k)) {
		      v = walk(value, k);
		      if (v !== undefined) {
			  value[k] = v;
		      } else {
			  delete value[k];
		      }
		  }
	      }
	  }
	  return reviver.call(holder, key, value);
=======
          var k, v, value = holder[key];
          if (value && typeof value === 'object') {
              for (k in value) {
                  if (Object.prototype.hasOwnProperty.call(value, k)) {
                      v = walk(value, k);
                      if (v !== undefined) {
                          value[k] = v;
                      } else {
                          delete value[k];
                      }
                  }
              }
          }
          return reviver.call(holder, key, value);
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
      }


  // Parsing happens in four stages. In the first stage, we replace certain
  // Unicode characters with escape sequences. JavaScript handles many characters
  // incorrectly, either silently deleting them, or treating them as line endings.

      text = String(text);
      cx.lastIndex = 0;
      if (cx.test(text)) {
<<<<<<< HEAD
	  text = text.replace(cx, function (a) {
	      return '\\u' +
		  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	  });
=======
          text = text.replace(cx, function (a) {
              return '\\u' +
                  ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
          });
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
      }

  // In the second stage, we run the text against regular expressions that look
  // for non-JSON patterns. We are especially concerned with '()' and 'new'
  // because they can cause invocation, and '=' because it can cause mutation.
  // But just to be safe, we want to reject all unexpected forms.

  // We split the second stage into 4 regexp operations in order to work around
  // crippling inefficiencies in IE's and Safari's regexp engines. First we
  // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
  // replace all simple value tokens with ']' characters. Third, we delete all
  // open brackets that follow a colon or comma or that begin the text. Finally,
  // we look to see that the remaining characters are only whitespace or ']' or
  // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

      if (/^[\],:{}\s]*$/
<<<<<<< HEAD
	      .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
		  .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
		  .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
=======
              .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                  .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                  .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e

  // In the third stage we use the eval function to compile the text into a
  // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
  // in JavaScript: it can begin a block or an object literal. We wrap the text
  // in parens to eliminate the ambiguity.

<<<<<<< HEAD
	  j = eval('(' + text + ')');
=======
          j = eval('(' + text + ')');
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e

  // In the optional fourth stage, we recursively walk the new structure, passing
  // each name/value pair to a reviver function for possible transformation.

<<<<<<< HEAD
	  return typeof reviver === 'function' ?
	      walk({'': j}, '') : j;
=======
          return typeof reviver === 'function' ?
              walk({'': j}, '') : j;
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
      }

  // If the text is not JSON parseable, then a SyntaxError is thrown.

      throw new SyntaxError('JSON.parse');
  };

})(
    'undefined' != typeof io ? io : module.exports
  , typeof JSON !== 'undefined' ? JSON : undefined
);
