// Copyright (c) 2013 Titanium I.T. LLC. Licensed under the MIT license.
(function() {
    "use strict";

	var cachedModules = {};

// load all modules
for (var modulePath in window.__cjs_module__) {
    require(modulePath, modulePath);
};

function require(requiringFile, dependency) {

    if (window.__cjs_module__ === undefined) throw new Error("Could not find any modules. Did you remember to set 'preprocessors' in your Karma config?");
    if (window.__cjs_modules_root__ === undefined) throw new Error("Could not find CommonJS module root path. Please report this issue to the karma-commonjs project.");

    dependency = normalizePath(requiringFile, dependency, window.__cjs_modules_root__ || '');

    // find module
    var moduleFn = window.__cjs_module__[dependency];
    if (moduleFn === undefined) throw new Error("Could not find module '" + dependency + "' from '" + requiringFile + "'");

    // run the module (if necessary)
    var module = cachedModules[dependency];
    if (module === undefined) {
<<<<<<< HEAD
	module = { exports: {} };
	cachedModules[dependency] = module;
	moduleFn(requireFn(dependency), module, module.exports);
=======
        module = { exports: {} };
        cachedModules[dependency] = module;
        moduleFn(requireFn(dependency), module, module.exports);
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
    }
    return module.exports;
};

function requireFn(basepath) {
    return function(dependency) {
<<<<<<< HEAD
	return require(basepath, dependency);
=======
        return require(basepath, dependency);
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
    };
};

function normalizePath(basePath, relativePath, modulesRoot) {

    if (isFullPath(relativePath)) return relativePath;
    if (isNpmModulePath(relativePath)) basePath = modulesRoot;
    if (!isFullPath(basePath)) throw new Error("basePath should be full path, but was [" + basePath + "]");

    var relativePathLeadingChar = relativePath.charAt(0);

    var baseComponents = basePath.split("/");
    var relativeComponents = relativePath.split("/");
    var nextComponent;
<<<<<<< HEAD

    if (!isNpmModulePath(relativePath)) {
	baseComponents.pop();     // remove file portion of basePath before starting
    }
    while (relativeComponents.length > 0) {
	nextComponent = relativeComponents.shift();

	if (nextComponent === ".") continue;
	else if (nextComponent === "..") baseComponents.pop();
	else baseComponents.push(nextComponent);
    }

    var normalizedPath = baseComponents.join("/");

    if (normalizedPath.substr(normalizedPath.length - 3) !== ".js") {
	normalizedPath += ".js";
=======
    
    if (!isNpmModulePath(relativePath)) {
        baseComponents.pop();     // remove file portion of basePath before starting
    }
    while (relativeComponents.length > 0) {
        nextComponent = relativeComponents.shift();

        if (nextComponent === ".") continue;
        else if (nextComponent === "..") baseComponents.pop();
        else baseComponents.push(nextComponent);
    }
    
    var normalizedPath = baseComponents.join("/");

    if (normalizedPath.substr(normalizedPath.length - 3) !== ".js") {
        normalizedPath += ".js";
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
    }

    return normalizedPath;


    function isFullPath(path) {
<<<<<<< HEAD
	var unixFullPath = (path.charAt(0) === "/");
	var windowsFullPath = (path.indexOf(":") !== -1);

	return unixFullPath || windowsFullPath;
=======
        var unixFullPath = (path.charAt(0) === "/");
        var windowsFullPath = (path.indexOf(":") !== -1);

        return unixFullPath || windowsFullPath;
>>>>>>> 40dc066702148240d46d84f6c15203d8e58bc81e
    }

    function isNpmModulePath(path) {
      return path.charAt(0) !== ".";
    }
}
})(window);